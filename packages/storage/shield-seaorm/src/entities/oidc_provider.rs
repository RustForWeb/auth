//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.2

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "oidc_provider")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: Uuid,
    pub created_at: DateTimeUtc,
    pub updated_at: DateTimeUtc,
    pub name: String,
    pub slug: Option<String>,
    #[sea_orm(column_type = "custom(\"enum_text\")")]
    pub r#type: String,
    #[sea_orm(column_type = "custom(\"enum_text\")")]
    pub visibility: String,
    #[sea_orm(column_type = "Text")]
    pub client_id: String,
    #[sea_orm(column_type = "Text", nullable)]
    pub client_secret: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub scopes: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub redirect_url: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub issuer_url: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub authorization_url: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub authorization_url_params: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub token_url: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub token_url_params: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub introspection_url: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub introspection_url_params: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub revocation_url: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub revocation_url_params: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub user_info_url: Option<String>,
    #[sea_orm(column_type = "Text", nullable)]
    pub json_web_key_set_url: Option<String>,
    #[sea_orm(column_type = "JsonBinary", nullable)]
    pub json_web_key_set: Option<Json>,
    #[sea_orm(column_type = "custom(\"enum_text\")")]
    pub pcke_code_challenge: String,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::oidc_provider_connection::Entity")]
    OidcProviderConnection,
}

impl Related<super::oidc_provider_connection::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::OidcProviderConnection.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
